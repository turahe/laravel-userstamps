name: PHP Tests

# This workflow includes:
# 1. Matrix Tests: Comprehensive testing across Laravel versions, PHP versions, and databases
# 2. Test Scripts: Dedicated job that mimics our local test script behavior
# 3. Test Script Validation: Ensures our test scripts are valid and executable
# 4. Test Coverage: Runs tests with coverage reporting
# 5. Code Style: Runs Laravel Pint for code formatting

on:
  push:
    branches: [ "master", "main" ]
  pull_request:
    branches: [ "master", "main" ]

permissions:
  contents: read

jobs:
  test:
    name: Matrix Tests - Laravel ${{ matrix.laravel }} - PHP ${{ matrix.php }} - ${{ matrix.database }}

    runs-on: ubuntu-24.04

    strategy:
      fail-fast: false
      matrix:
        laravel: [10.*, 11.*, 12.*]
        php: [8.2, 8.3, 8.4]
        database: [sqlite, mysql, postgres]
        exclude:
          # Exclude incompatible combinations
          - laravel: 10.*
            php: 8.4
          - laravel: 11.*
            php: 8.2

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_userstamps_test
          MYSQL_USER: laravel_userstamps
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: laravel_userstamps_test
          POSTGRES_USER: laravel_userstamps
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlwriter
        coverage: none

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-${{ matrix.php }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-${{ matrix.php }}-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Setup Laravel version
      run: |
        composer require "laravel/framework:${{ matrix.laravel }}" --no-interaction --no-update
        composer update --no-interaction

    - name: Create environment file
      run: |
        if [ "${{ matrix.database }}" = "mysql" ]; then
          cp env.mysql .env
        elif [ "${{ matrix.database }}" = "postgres" ]; then
          cp env.postgres .env
        fi

    - name: Wait for database
      if: matrix.database != 'sqlite'
      run: |
        if [ "${{ matrix.database }}" = "mysql" ]; then
          timeout 60 bash -c 'until mysql -h 127.0.0.1 -P 3306 -u laravel_userstamps -ppassword laravel_userstamps_test -e "SELECT 1"; do sleep 2; done'
        elif [ "${{ matrix.database }}" = "postgres" ]; then
          timeout 60 bash -c 'until pg_isready -h 127.0.0.1 -p 5432 -U laravel_userstamps; do sleep 2; done'
        fi

    - name: Run test suite
      run: |
        if [ "${{ matrix.database }}" = "mysql" ]; then
          # Use MySQL test script logic
          echo "Running tests with MySQL..."
          vendor/bin/phpunit --no-coverage
        elif [ "${{ matrix.database }}" = "postgres" ]; then
          # Use PostgreSQL test script logic
          echo "Running tests with PostgreSQL..."
          vendor/bin/phpunit --no-coverage
        else
          # SQLite tests
          echo "Running tests with SQLite..."
          vendor/bin/phpunit --no-coverage
        fi

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.laravel }}-${{ matrix.php }}-${{ matrix.database }}
        path: |
          .phpunit.result.cache
          build/
        retention-days: 7

  test-coverage:
    name: Test Coverage (Laravel 12 - PHP 8.4 - SQLite)

    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlwriter
        coverage: xdebug

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.4-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Setup Laravel 12
      run: |
        composer require "laravel/framework:12.*" --no-interaction --no-update
        composer update --no-interaction

    - name: Run test suite with coverage
      run: vendor/bin/phpunit --coverage-clover=coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  test-scripts:
    name: Test Scripts (Laravel 12 - PHP 8.4)

    runs-on: ubuntu-24.04

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: laravel_userstamps_test
          MYSQL_USER: laravel_userstamps
          MYSQL_PASSWORD: password
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: laravel_userstamps_test
          POSTGRES_USER: laravel_userstamps
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlwriter
        coverage: none

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.4-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Setup Laravel 12
      run: |
        composer require "laravel/framework:12.*" --no-interaction --no-update
        composer update --no-interaction

    - name: Create environment files
      run: |
        cp env.mysql .env
        cp env.postgres .env.postgres

    - name: Wait for databases
      run: |
        echo "Waiting for MySQL..."
        timeout 60 bash -c 'until mysql -h 127.0.0.1 -P 3306 -u laravel_userstamps -ppassword laravel_userstamps_test -e "SELECT 1"; do sleep 2; done'
        echo "Waiting for PostgreSQL..."
        timeout 60 bash -c 'until pg_isready -h 127.0.0.1 -p 5432 -U laravel_userstamps; do sleep 2; done'

    - name: Run tests with MySQL
      run: |
        echo "Running tests with MySQL..."
        vendor/bin/phpunit --no-coverage

    - name: Run tests with PostgreSQL
      run: |
        echo "Switching to PostgreSQL..."
        cp .env.postgres .env
        echo "Running tests with PostgreSQL..."
        vendor/bin/phpunit --no-coverage

    - name: Run tests with SQLite
      run: |
        echo "Running tests with SQLite..."
        vendor/bin/phpunit --no-coverage

  test-script-validation:
    name: Test Script Validation (Laravel 12 - PHP 8.4)

    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, pdo_mysql, pdo_pgsql, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlwriter
        coverage: none

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.4-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Setup Laravel 12
      run: |
        composer require "laravel/framework:12.*" --no-interaction --no-update
        composer update --no-interaction

    - name: Validate test scripts
      run: |
        echo "Validating test scripts..."
        echo "Checking script permissions..."
        ls -la scripts/
        echo "Validating shell scripts..."
        bash -n scripts/test-all.sh
        bash -n scripts/test-mysql.sh
        bash -n scripts/test-postgres.sh
        echo "Validating PowerShell scripts..."
        pwsh -Command "Get-Content scripts/test-all.ps1 | Out-String | Invoke-Expression -Command 'Write-Host \"PowerShell script syntax is valid\"'"

    - name: Test script execution (dry run)
      run: |
        echo "Testing script execution logic..."
        # Test the logic without actually running databases
        if [ -f "scripts/test-mysql.sh" ]; then
          echo "MySQL test script exists and is executable"
        fi
        if [ -f "scripts/test-postgres.sh" ]; then
          echo "PostgreSQL test script exists and is executable"
        fi
        if [ -f "scripts/test-all.sh" ]; then
          echo "All databases test script exists and is executable"
        fi

  lint:
    name: Code Style Check

    runs-on: ubuntu-24.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: 8.4
        extensions: mbstring, xml, ctype, iconv, intl, pdo_sqlite, dom, filter, gd, iconv, json, mbstring, pdo, pdo_sqlite, phar, tokenizer, xml, xmlwriter

    - name: Get composer cache directory
      id: composer-cache
      run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

    - name: Cache Composer packages
      uses: actions/cache@v4
      with:
        path: ${{ steps.composer-cache.outputs.dir }}
        key: ${{ runner.os }}-php-8.4-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-8.4-composer-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-interaction

    - name: Setup Laravel 12
      run: |
        composer require "laravel/framework:12.*" --no-interaction --no-update
        composer update --no-interaction

    - name: Run Laravel Pint
      run: vendor/bin/pint --test
